<xref>
  <beforeSteps/>
  <stories>
    <performableStory>
      <story>
        <path>me/ederign/selenium/upload_view_story.story</path>
        <description>
          <descriptionAsString></descriptionAsString>
        </description>
        <narrative>
          <inOrderTo></inOrderTo>
          <asA></asA>
          <iWantTo></iWantTo>
        </narrative>
        <meta>
          <properties/>
        </meta>
        <scenarios>
          <scenario>
            <title>test engineer wants to upload file to system</title>
            <meta>
              <properties/>
            </meta>
            <givenStories>
              <givenStories/>
              <givenStoriesAsString></givenStoriesAsString>
              <examplesTable>
                <tableAsString></tableAsString>
                <headerSeparator>|</headerSeparator>
                <valueSeparator>|</valueSeparator>
                <ignorableSeparator>|--</ignorableSeparator>
                <tableTransformers>
                  <transformers>
                    <entry>
                      <string>FROM_LANDSCAPE</string>
                      <fromLandscape/>
                    </entry>
                  </transformers>
                </tableTransformers>
                <headers/>
                <data/>
                <properties>
                  <property name="headerSeparator" value="|"/>
                  <property name="valueSeparator" value="|"/>
                  <property name="ignorableSeparator" value="|--"/>
                </properties>
                <propertiesAsString></propertiesAsString>
                <namedParameters/>
                <trim>true</trim>
              </examplesTable>
            </givenStories>
            <examplesTable>
              <tableAsString></tableAsString>
              <headerSeparator>|</headerSeparator>
              <valueSeparator>|</valueSeparator>
              <ignorableSeparator>|--</ignorableSeparator>
              <tableTransformers>
                <transformers>
                  <entry>
                    <string>FROM_LANDSCAPE</string>
                    <fromLandscape/>
                  </entry>
                </transformers>
              </tableTransformers>
              <headers/>
              <data/>
              <properties>
                <property name="headerSeparator" value="|"/>
                <property name="valueSeparator" value="|"/>
                <property name="ignorableSeparator" value="|--"/>
              </properties>
              <propertiesAsString></propertiesAsString>
              <namedParameters/>
              <trim>true</trim>
            </examplesTable>
            <steps>
              <string>Given a file to be uploaded</string>
              <string>Given that the &apos;Browse&apos; button is clicked and /home/cc2012/ra139270/aoInfinitoEALEM is chosen</string>
              <string>Given that is a valid file</string>
              <string>When the &apos;Submeter&apos; button is clicked</string>
              <string>Then the file is uploaded</string>
            </steps>
          </scenario>
        </scenarios>
        <name>upload_view_story.story</name>
        <givenStories>
          <givenStories/>
          <givenStoriesAsString></givenStoriesAsString>
          <examplesTable>
            <tableAsString></tableAsString>
            <headerSeparator>|</headerSeparator>
            <valueSeparator>|</valueSeparator>
            <ignorableSeparator>|--</ignorableSeparator>
            <tableTransformers>
              <transformers>
                <entry>
                  <string>FROM_LANDSCAPE</string>
                  <fromLandscape/>
                </entry>
              </transformers>
            </tableTransformers>
            <headers/>
            <data/>
            <properties>
              <property name="headerSeparator" value="|"/>
              <property name="valueSeparator" value="|"/>
              <property name="ignorableSeparator" value="|--"/>
            </properties>
            <propertiesAsString></propertiesAsString>
            <namedParameters/>
            <trim>true</trim>
          </examplesTable>
        </givenStories>
      </story>
      <allowed>true</allowed>
      <givenStories/>
      <scenarios>
        <performableScenario>
          <scenario>
            <title>test engineer wants to upload file to system</title>
            <meta>
              <properties/>
            </meta>
            <givenStories>
              <givenStories/>
              <givenStoriesAsString></givenStoriesAsString>
              <examplesTable>
                <tableAsString></tableAsString>
                <headerSeparator>|</headerSeparator>
                <valueSeparator>|</valueSeparator>
                <ignorableSeparator>|--</ignorableSeparator>
                <tableTransformers>
                  <transformers>
                    <entry>
                      <string>FROM_LANDSCAPE</string>
                      <fromLandscape/>
                    </entry>
                  </transformers>
                </tableTransformers>
                <headers/>
                <data/>
                <properties>
                  <property name="headerSeparator" value="|"/>
                  <property name="valueSeparator" value="|"/>
                  <property name="ignorableSeparator" value="|--"/>
                </properties>
                <propertiesAsString></propertiesAsString>
                <namedParameters/>
                <trim>true</trim>
              </examplesTable>
            </givenStories>
            <examplesTable>
              <tableAsString></tableAsString>
              <headerSeparator>|</headerSeparator>
              <valueSeparator>|</valueSeparator>
              <ignorableSeparator>|--</ignorableSeparator>
              <tableTransformers>
                <transformers>
                  <entry>
                    <string>FROM_LANDSCAPE</string>
                    <fromLandscape/>
                  </entry>
                </transformers>
              </tableTransformers>
              <headers/>
              <data/>
              <properties>
                <property name="headerSeparator" value="|"/>
                <property name="valueSeparator" value="|"/>
                <property name="ignorableSeparator" value="|--"/>
              </properties>
              <propertiesAsString></propertiesAsString>
              <namedParameters/>
              <trim>true</trim>
            </examplesTable>
            <steps>
              <string>Given a file to be uploaded</string>
              <string>Given that the &apos;Browse&apos; button is clicked and /home/cc2012/ra139270/aoInfinitoEALEM is chosen</string>
              <string>Given that is a valid file</string>
              <string>When the &apos;Submeter&apos; button is clicked</string>
              <string>Then the file is uploaded</string>
            </steps>
          </scenario>
          <allowed>true</allowed>
          <exampleScenarios/>
          <givenStories/>
          <beforeSteps/>
          <steps>
            <matches>
              <stepMatch>
                <type>GIVEN</type>
                <annotatedPattern>a file to be uploaded</annotatedPattern>
                <resolvedPattern>a\s+file\s+to\s+be\s+uploaded</resolvedPattern>
              </stepMatch>
              <stepMatch>
                <type>GIVEN</type>
                <annotatedPattern>that is a valid file</annotatedPattern>
                <resolvedPattern>that\s+is\s+a\s+valid\s+file</resolvedPattern>
              </stepMatch>
              <stepMatch>
                <type>WHEN</type>
                <annotatedPattern>the &apos;Submeter&apos; button is clicked</annotatedPattern>
                <resolvedPattern>the\s+&apos;Submeter&apos;\s+button\s+is\s+clicked</resolvedPattern>
              </stepMatch>
            </matches>
            <results>
              <pending>
                <step>Given a file to be uploaded</step>
                <throwable class="org.jbehave.core.failures.PendingStepFound">
                  <detailMessage>Given a file to be uploaded</detailMessage>
                  <stackTrace>
                    <trace>org.jbehave.core.steps.AbstractStepResult$Pending.&lt;init&gt;(AbstractStepResult.java:58)</trace>
                    <trace>org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:172)</trace>
                    <trace>org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:604)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:252)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:775)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:692)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:600)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:590)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:309)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:289)</trace>
                    <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:222)</trace>
                    <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:201)</trace>
                    <trace>java.util.concurrent.FutureTask.run(FutureTask.java:266)</trace>
                    <trace>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</trace>
                    <trace>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</trace>
                    <trace>java.lang.Thread.run(Thread.java:745)</trace>
                  </stackTrace>
                  <suppressedExceptions class="java.util.Collections$UnmodifiableRandomAccessList" resolves-to="java.util.Collections$UnmodifiableList">
                    <c class="list"/>
                    <list/>
                  </suppressedExceptions>
                  <uuid>a5f322a8-3de3-4d77-b9ce-eec76c8f5421</uuid>
                </throwable>
                <durationInMillis>0</durationInMillis>
              </pending>
              <pending>
                <step>Given that the &apos;Browse&apos; button is clicked and /home/cc2012/ra139270/aoInfinitoEALEM is chosen</step>
                <throwable class="org.jbehave.core.failures.PendingStepFound">
                  <detailMessage>Given that the &apos;Browse&apos; button is clicked and /home/cc2012/ra139270/aoInfinitoEALEM is chosen</detailMessage>
                  <stackTrace>
                    <trace>org.jbehave.core.steps.AbstractStepResult$Pending.&lt;init&gt;(AbstractStepResult.java:58)</trace>
                    <trace>org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:172)</trace>
                    <trace>org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:608)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:280)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:775)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:692)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:600)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:590)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:309)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:289)</trace>
                    <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:222)</trace>
                    <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:201)</trace>
                    <trace>java.util.concurrent.FutureTask.run(FutureTask.java:266)</trace>
                    <trace>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</trace>
                    <trace>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</trace>
                    <trace>java.lang.Thread.run(Thread.java:745)</trace>
                  </stackTrace>
                  <suppressedExceptions class="java.util.Collections$UnmodifiableRandomAccessList" resolves-to="java.util.Collections$UnmodifiableList">
                    <c class="list"/>
                    <list/>
                  </suppressedExceptions>
                  <uuid>555b358c-3d82-4b54-90fa-cad495c06101</uuid>
                </throwable>
                <durationInMillis>0</durationInMillis>
              </pending>
              <pending>
                <step>Given that is a valid file</step>
                <throwable class="org.jbehave.core.failures.PendingStepFound">
                  <detailMessage>Given that is a valid file</detailMessage>
                  <stackTrace>
                    <trace>org.jbehave.core.steps.AbstractStepResult$Pending.&lt;init&gt;(AbstractStepResult.java:58)</trace>
                    <trace>org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:172)</trace>
                    <trace>org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:608)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:280)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:775)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:692)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:600)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:590)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:309)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:289)</trace>
                    <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:222)</trace>
                    <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:201)</trace>
                    <trace>java.util.concurrent.FutureTask.run(FutureTask.java:266)</trace>
                    <trace>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</trace>
                    <trace>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</trace>
                    <trace>java.lang.Thread.run(Thread.java:745)</trace>
                  </stackTrace>
                  <suppressedExceptions class="java.util.Collections$UnmodifiableRandomAccessList" resolves-to="java.util.Collections$UnmodifiableList">
                    <c class="list"/>
                    <list/>
                  </suppressedExceptions>
                  <uuid>14cedcc4-9436-4e3f-8114-0542a63a29e9</uuid>
                </throwable>
                <durationInMillis>0</durationInMillis>
              </pending>
              <pending>
                <step>When the &apos;Submeter&apos; button is clicked</step>
                <throwable class="org.jbehave.core.failures.PendingStepFound">
                  <detailMessage>When the &apos;Submeter&apos; button is clicked</detailMessage>
                  <stackTrace>
                    <trace>org.jbehave.core.steps.AbstractStepResult$Pending.&lt;init&gt;(AbstractStepResult.java:58)</trace>
                    <trace>org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:172)</trace>
                    <trace>org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:608)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:280)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:775)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:692)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:600)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:590)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:309)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:289)</trace>
                    <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:222)</trace>
                    <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:201)</trace>
                    <trace>java.util.concurrent.FutureTask.run(FutureTask.java:266)</trace>
                    <trace>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</trace>
                    <trace>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</trace>
                    <trace>java.lang.Thread.run(Thread.java:745)</trace>
                  </stackTrace>
                  <suppressedExceptions class="java.util.Collections$UnmodifiableRandomAccessList" resolves-to="java.util.Collections$UnmodifiableList">
                    <c class="list"/>
                    <list/>
                  </suppressedExceptions>
                  <uuid>6b5a1169-b6f5-498e-89bc-f958a54fea87</uuid>
                </throwable>
                <durationInMillis>0</durationInMillis>
              </pending>
              <pending>
                <step>Then the file is uploaded</step>
                <throwable class="org.jbehave.core.failures.PendingStepFound">
                  <detailMessage>Then the file is uploaded</detailMessage>
                  <stackTrace>
                    <trace>org.jbehave.core.steps.AbstractStepResult$Pending.&lt;init&gt;(AbstractStepResult.java:58)</trace>
                    <trace>org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:172)</trace>
                    <trace>org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:608)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:280)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:775)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:692)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:600)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:590)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:309)</trace>
                    <trace>org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:289)</trace>
                    <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:222)</trace>
                    <trace>org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:201)</trace>
                    <trace>java.util.concurrent.FutureTask.run(FutureTask.java:266)</trace>
                    <trace>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</trace>
                    <trace>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</trace>
                    <trace>java.lang.Thread.run(Thread.java:745)</trace>
                  </stackTrace>
                  <suppressedExceptions class="java.util.Collections$UnmodifiableRandomAccessList" resolves-to="java.util.Collections$UnmodifiableList">
                    <c class="list"/>
                    <list/>
                  </suppressedExceptions>
                  <uuid>4f75bef2-eea5-48c2-bcea-51d91308ba05</uuid>
                </throwable>
                <durationInMillis>0</durationInMillis>
              </pending>
            </results>
          </steps>
          <afterSteps/>
        </performableScenario>
      </scenarios>
      <beforeSteps/>
      <afterSteps/>
      <timing>
        <durationInMillis>10</durationInMillis>
      </timing>
    </performableStory>
  </stories>
  <afterSteps/>
</xref>